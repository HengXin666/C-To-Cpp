#include <iostream>

void text_004(void)
{
	float f = 0.721f;
	// c语言的方法
	int a = (int)f;

	// c++的方法
	int b = int(f);

	// 有什么不同吗?
	int c = static_cast<int>(f);

	/* By GPT-3.5
	* 可以防止精度丢失：
	*	例如，将一个较大的浮点数转换为整型时，
	*	如果超出了整型的表示范围，static_cast<int>(f)会产生一个编译器错误。
	*	这样可以避免在运行时发生数据截断导致的精度丢失。
	*
	*  可以防止截断错误：
	*	当执行隐式类型转换时，如果源类型和目标类型之间的差异较大，可能导致数据截断错误。
	*	使用static_cast<int>(f)可以明确地指示转换操作，从而避免截断错误。
	*
	* 不允许非法转换：
	*	使用static_cast<int>(f)需要满足一定的类型兼容性要求。
	*	如果转换是非法的，例如尝试将一个指针类型转换为整型，编译器会产生一个错误。
	* */

	std::cout << a << " " << b << " " << c << std::endl;
}